// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: sources.sql

package db

import (
	"context"
	"time"
)

const deleteSource = `-- name: DeleteSource :one
DELETE FROM 
    sources 
WHERE id = $1
RETURNING id, name, url, driver, created_at, updated_at
`

func (q *Queries) DeleteSource(ctx context.Context, id int32) (Source, error) {
	row := q.db.QueryRowContext(ctx, deleteSource, id)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Driver,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertSource = `-- name: InsertSource :one
INSERT INTO sources (name, url, driver) 
VALUES ($1, $2, $3)
RETURNING id, name, url, driver, created_at, updated_at
`

type InsertSourceParams struct {
	Name   string
	Url    string
	Driver string
}

func (q *Queries) InsertSource(ctx context.Context, arg InsertSourceParams) (Source, error) {
	row := q.db.QueryRowContext(ctx, insertSource, arg.Name, arg.Url, arg.Driver)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Driver,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSources = `-- name: ListSources :many
SELECT id, name, url, driver, created_at, updated_at 
FROM sources
`

func (q *Queries) ListSources(ctx context.Context) ([]Source, error) {
	rows, err := q.db.QueryContext(ctx, listSources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Driver,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSource = `-- name: SelectSource :one
SELECT id, name, url, driver, created_at, updated_at 
FROM sources 
WHERE id = $1
`

func (q *Queries) SelectSource(ctx context.Context, id int32) (Source, error) {
	row := q.db.QueryRowContext(ctx, selectSource, id)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Driver,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSource = `-- name: UpdateSource :one
UPDATE sources 
SET 
    name = $2, 
    url = $3, 
    driver = $4,
    created_at = $5
WHERE id = $1
RETURNING id, name, url, driver, created_at, updated_at
`

type UpdateSourceParams struct {
	ID        int32
	Name      string
	Url       string
	Driver    string
	CreatedAt time.Time
}

func (q *Queries) UpdateSource(ctx context.Context, arg UpdateSourceParams) (Source, error) {
	row := q.db.QueryRowContext(ctx, updateSource,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.Driver,
		arg.CreatedAt,
	)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Driver,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
